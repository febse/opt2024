[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Въведение в математическата оптимизация",
    "section": "",
    "text": "Setup",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#git",
    "href": "index.html#git",
    "title": "Въведение в математическата оптимизация",
    "section": "Git",
    "text": "Git\nGit е система за управление на версии, която се използва широко в софтуерната индустрия. Можете да използвате Git, за да свалите материалите за курса от GitHub хранилището\nhttps://github.com/febse/opt2024\nМожете да инсталирате Git от https://git-scm.com/downloads. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#visual-studio-code",
    "href": "index.html#visual-studio-code",
    "title": "Въведение в математическата оптимизация",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nЕдна от възможностите за работа с Python е Visual Studio Code (VSC), безплатна интегрирана среда за разработка (IDE) от Microsoft с множество разширения за различни езици и технологии. Можете да инсталирате VSC от https://code.visualstudio.com/. Изберете версията, която отговаря на операционната ви система и следвайте инструкциите.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#клониране-на-хранилището-на-курса",
    "href": "index.html#клониране-на-хранилището-на-курса",
    "title": "Въведение в математическата оптимизация",
    "section": "Клониране на хранилището на курса",
    "text": "Клониране на хранилището на курса\nОтворете VSC и натиснете Ctrl+Shift+P. Търсете “Git: Clone” и натиснете Enter. Въведете URL адреса на хранилището на курса:\nhttps://github.com/febse/opt2024.git\nИзберете директория на вашия компютър, където искате да запазите хранилището. VSC ще свали хранилището и ще ви попита дали искате да го отворите. Натиснете “Open”.\nИзчакайте малко, докато VSC отвори хранилището. Трябва да видите структура от файлове и директории, която представлява съдържанието на хранилището. При първото отваряне на хранилището, VSC ще ви попита дали искате да инсталирате препоръчителните разширения. Натиснете “Install All”.\nСлед инсталацията трябва да видите следните разширения:\n\nms-python.autopep8\nms-python.python\nms-python.debugpy\nms-vscode-remote.remote-containers\nms-toolsai.jupyter\ngithub.codespaces\ngithub.copilot\n\nНатиснете Ctrl+Shift+X, което ще отвори списъка с разширения. Проверете дали всички разширения са инсталирани. Ако не са, копирайте идентификаторите (например ms-python.autopep8) на липсващите разширения от списъка (горе), намерете разширенията в изгледа на разширенията и ги инсталирайте ръчно.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "Въведение в математическата оптимизация",
    "section": "Python",
    "text": "Python\nPython е един от най-използваните езици за програмиране, особено в областта на анализ на данни, машинното обучение и изкуствен интелект. Python е лесен за учене и има голяма общност, която е разработила много библиотеки и рамки. Има много начини да инсталирате Python на вашия компютър. За целите на този курс, ние ще използваме Python 3.11 и Miniconda.\n\nСвалете инсталационния пакет на Miniconda от https://docs.conda.io/en/latest/miniconda.html за вашата операционна система.\nСтартирайте инсталационния пакет и следвайте инструкциите. Оставете настройките по подразбиране, освен ако не знаете какво точно искате да направите.\nИнсталирайте Miniconda в директория без интервали и само с ASCII символи в пътя (т.е. без кирилица, без умлаути и т.н.), например C:\\Miniconda3 или C:\\Users\\boyko\\Miniconda3.\nСлед като инсталацията приключи, отворете VSC и натиснете Ctrl+Shift+P. Търсете “Python: Create environment” и натиснете Enter.\nИзберете “Conda”\nИзберете версия на Python: Python-3.11\nТова ще създаде директория .conda в директорията на хранилището на курса и ще инсталира Python 3.11 в нея, заедно с библиотеките, дефинирани в environment.yml.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "02-Introduction/index.html",
    "href": "02-Introduction/index.html",
    "title": "1  Въведение",
    "section": "",
    "text": "1.1 Игра на бурито\nhttps://www.gurobi.com/burrito-optimization-game/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#берлинският-въздушен-мост",
    "href": "02-Introduction/index.html#берлинският-въздушен-мост",
    "title": "1  Въведение",
    "section": "1.2 Берлинският въздушен мост",
    "text": "1.2 Берлинският въздушен мост\nСлед края на Втората световна война Германия е разделена на четири окупационни зони: Американска, Британска, Френска и Съветска. Берлин също така е разделен на четири зони, но достъпът до него по суша и по вода минава изцяло през територията на Съветската окупационна зона.\n\n\n\nОкупационни зони в Германия след Втората световна война. Източник: Wikipedia.\n\n\nНа 24-ти юни 1948 Съветският Съюз блокира достъпа до Западен Берлин, с което започва една от най-значимите конфронтации по време на Студената война. Без достъп по суша или вода, западните съюзници започват да снабдяват града по въздух (Берлински въздушен мост).\n\n\n\nРазтоварване на сол (река Хавел). Източник: Wikipedia.\n\n\n\n\n\nПриземяване на C-54 (Летище Темпелхоф). Източник: Wikipedia.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#описание-на-проблема",
    "href": "02-Introduction/index.html#описание-на-проблема",
    "title": "1  Въведение",
    "section": "1.3 Описание на проблема",
    "text": "1.3 Описание на проблема\nЗа по-просто нека да приемем, че доставките до Берлин се извършват с два вида самолети: американски, които могат да поемат до 30 000 кубични фута товар (\\approx 849 m^3), и британски самолети с капацитет до 20 000 кубични фута (\\approx 566 m^3).\nПоради ограничения в инфраструктурата на ден могат да летят най-много 48 самолета (независимо от кой вид).\nЗа всеки полет на американски самолет има нужда от 16 души персонал, двойно повече от броя нужен за британските самолети. Общо на разположение са 512 души на ден.\nРазходите за гориво и поддръжка на самолетите възлизат на 9000 долара за полет на американски самолет и на 5000 долара за полет на британски самолет. Поради бюджетни ограничения общите разходи не могат да надхвърлят 300 000 долара.\nКолко британски и колко американски самолети да използва на ден въздушният мост, така че да достави до Берлин възможно най-голямо количество стоки?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#математически-модел",
    "href": "02-Introduction/index.html#математически-модел",
    "title": "1  Въведение",
    "section": "1.4 Математически модел",
    "text": "1.4 Математически модел\n\n\n\n\n\n\nИзбор на променливи\n\n\n\n\n\n\n\\begin{align*}\n& x_1: \\text{ брой американски самолети}\\\\\n& x_2: \\text{ брой британски самолети}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦелева функция\n\n\n\n\n\nОбщ товар, който x_1 американски самолети и x_2 британски самолети могат да доставят:\n\nz(x_1, x_2) = 3 x_1 + 2 x_2\n\n\n\n\n\n\n\n\n\n\nОграничения\n\n\n\n\n\n\n\\begin{align*}\n& x_1 + x_2 \\leq 48 & \\text{ (инфраструктура)} \\\\\n& 16 x_1 + 8 x_2 \\leq 512 & \\text{ (персонал)} \\\\\n& 9 x_1 + 5 x_2 \\leq 300 & \\text{ (бюджет)} \\\\\n& x_1  \\geq 0 & \\text{ (брой американски самолети)} \\\\\n& x_2 \\geq 0 & \\text{ (брой британски самолети)}\n\\end{align*}\n\n\n\n\n\n\n\n\n\n\nЦялата задача\n\n\n\n\n\n\n\\begin{align*}\n& \\max z(x_1, x_2) = 3 x_1 + 2 x_2 \\\\\n& \\text{при условията:} \\\\\n& x_1 + x_2 \\leq 48 \\\\\n& 16 x_1 + 8 x_2 \\leq 512 \\\\\n& 9 x_1 + 5 x_2 \\leq 300 \\\\\n& x_1  \\geq 0 \\\\\n& x_2 \\geq 0\n\\end{align*}\n\n\n\n\nПреди да решим задачата, нека да я решим неформално в опростен вариант, като игнорираме второто и третото ограничение:\n\n\\begin{align*}\n\\max 3 x_1 + 2 x_2 \\\\\nx_1 + x_2 \\leq 48 \\\\\nx_1 \\geq 0 \\\\\nx_2 \\geq 0\n\\end{align*}\n\nРешение:\n\n(x^*_1 = 48, x^*_2 = 0)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#допустимо-множество",
    "href": "02-Introduction/index.html#допустимо-множество",
    "title": "1  Въведение",
    "section": "1.5 Допустимо множество",
    "text": "1.5 Допустимо множество\nЗа да решим задачата (и с трите ограничения) първо ще представим допустимото множество графично, като за целта ще начертаем правите към всяко от петте ограничения (включително ограниченията за неотрицателност). За да можем да начертаем правите са ни нужни по две точки от всяка права. Най-лесно можем да намерим пресечните им точки с двете оси (x_1 и x_2).\nЗа всички точки на оста x_2 е изпълнено, че x_1 = 0. Когато заместим с x_1 = 0 в уравнението на всяка от правите ще намерим пресечните им точки с оста x_2. За всички точки от оста x_1 важи, че x_2 = 0, така че когато заместим с x_2 = 0 в уравненията на правите ще получим пресечните им точки с оста x_1.\nПрава на първото ограничение (инфраструктура):\n\nx_1 + x_2 = 48\n\nЗа да намерим пресечните точки на правата (инфраструктура) с двете оси:\n\nПри x_1 = 0 на колко е равно x_2? 0 + x_2 = 48\nПри x_2 = 0 на колко е равно x_1? x_1 + 0 = 48\n\nЗа да намерим пресечните точки на втората права (персонал) с двете оси:\n\n16 x_1 + 8 x_2 = 512\n\n\nПри x_1 = 0 на колко е равно x_2? 16 \\cdot 0 + 8x_2 = 512 \\implies x_2 = 512 / 8 = 64\nПри x_2 = 0 на колко е равно x_1? 16 x_1 +8 \\cdot 0 = 512 \\implies x_1 = 512 / 16 = 32\n\nПо същия начин можем да намерим и две точки от правата на третото ограничение (бюджет): (0, 300 / 5) и (300 / 9, 0).\n\n\nПокажи кода\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.plot([0, 48], [48, 0], label=r'$x_1 + x_2 = 48 \\quad Инфрасруктура$')\nax.plot([0, 32], [64, 0], label=r'$16 x_1 + 8 x_2 = 512\\quad Персонал$')\nax.plot([0, 33.33], [60, 0], label=r'$9 x_1 + 5 x_2 = 300 \\quad Бюджет$')\n\nax.legend(loc=0)\n\n\n/tmp/ipykernel_263192/1610056778.py:10: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  fig.show()\n\n\n\n\n\n\n\n\n\n\n\nПокажи кода\nimport polytope as pc\nimport numpy as np\n\nA = np.array([[1, 1], [16, 8], [9, 5], [-1, 0], [0, -1]])\nb = np.array([48, 512, 300, 0, 0])\n\nP = pc.Polytope(A, b)\nP_extr = pc.extreme(P)\n\nP_extr\n\n\n`polytope` failed to import `cvxopt.glpk`.\nwill use `scipy.optimize.linprog`\n\n\narray([[32., -0.],\n       [20., 24.],\n       [15., 33.],\n       [-0., 48.],\n       [-0., -0.]])\n\n\nДопустимото множество се състои от всички точки в полигона (0, 0), (32, 0), (20, 24), (15, 33), (0, 48). Изчислението на пресечните точки (20, 24) и (15, 33).\n\n\nПокажи кода\nfrom matplotlib import pyplot as plt\n\nplt.plot(P_extr[:, 0], P_extr[:, 1], '-o')\n\nfor i, p in enumerate(P_extr):\n    plt.text(p[0], p[1], f\"({p[0]:0.1f}, {p[1]:0.1f})\")\n\n\n\n\n\n\n\n\n\n\n\nПокажи кода\ndef z(x1, x2):\n    return 3 * x1 + 2 * x2\n\n# (0, 0)\nprint(\"z(0, 0) = \", z(0, 0))\n\n# (32, 0)\nprint(\"z(32, 0) = \", z(32, 0))\n\n# (20, 24)\nprint(\"z(20, 24) = \", z(20, 24))\n\n# (15, 33)\nprint(\"z(15, 33) = \", z(15, 33))\n\n# (0, 48)\nprint(\"z(0, 48) = \", z(0, 48))\n\n\nz(0, 0) =  0\nz(32, 0) =  96\nz(20, 24) =  108\nz(15, 33) =  111\nz(0, 48) =  96\n\n\nОптималната комбинация от американски и британски самолети е (x^*_1 = 15, x^*_2 = 33). Това е възможно най-големият товар, който могат да пренесат самолетите при дадените ограничения. Този товар е равен на $30000 x^*_{1} + 20000 x^*_{2} = 30000 \\cdot 15 + 20000 \\cdot 33 = 1 110 000 кубични фута, използвайки 15 американски и 33 британски самолета.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "href": "02-Introduction/index.html#проблем-с-настоящия-подход",
    "title": "1  Въведение",
    "section": "1.6 Проблем с настоящия подход",
    "text": "1.6 Проблем с настоящия подход\nВ момента решихме задачата, като изчислихме върховете на допустимото множество и пресметнахме целевата функция във всеки от тях. Решението на максимизационната задача беше върхът с най-висока стойност на целевата функция.\nЗа съжаление този подход е приложим само за много малки задачи и няма практическа стойност. Причината за това е, че броят на върховете на допустимото множество нараства много бързо с увеличаване на броя на ограниченията и променливите. Горна граница за броя на върховете на допустимото множество е дадена от биномния коефициент:\n\n\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\n\nкъдето n е броят на променливите, а k е броят на ограниченията. Можем да пресметнем горната граница за броя на върховете на допустимото за различни комбинации на n и k:\n\n\nПокажи кода\nfrom scipy.special import comb\n\nprint(\"n = 20, k = 15, Максимален брой върхове = \", comb(20, 15))\nprint(\"n = 40, k = 25, Максимален брой върхове = \", comb(40, 25))\nprint(\"n = 50, k = 25, Максимален брой върхове = \", comb(50, 25))\n\n\nn = 20, k = 15, Максимален брой върхове =  15504.0\nn = 40, k = 25, Максимален брой върхове =  40225345056.0\nn = 50, k = 25, Максимален брой върхове =  126410606437752.05\n\n\nИзчисляването на целевата функция за всички върхове е непостижимо дори за модерни компютри. Ако приемем, че компютърът може да обработи 1 милиард върха на секунда, за 80 променливи и 40 ограничения ще му трябва много време:\n\n\nПокажи кода\ncomb_n = comb(80, 45)\nprint(round(comb_n / (1e9 * 60 * 60 * 24 * 365), 1), \"години\")\n\n\n1836016.6 години",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-в-excel",
    "href": "02-Introduction/index.html#решение-на-модела-в-excel",
    "title": "1  Въведение",
    "section": "1.7 Решение на модела в Excel",
    "text": "1.7 Решение на модела в Excel\nРешение на модела в Excel",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "href": "02-Introduction/index.html#решение-на-модела-с-gurobipy",
    "title": "1  Въведение",
    "section": "1.8 Решение на модела с gurobipy",
    "text": "1.8 Решение на модела с gurobipy\n\n\nПокажи кода\nimport gurobipy as gp\nfrom gurobipy import GRB\nimport pandas as pd\n\n# Съставяне на нов модел\n\nm = gp.Model(\"Berlin Airlift\")\n\nx1 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"American\")\nx2 = m.addVar(vtype=GRB.INTEGER, lb = 0, name=\"British\")\n\n# Целева функция\n\nm.setObjective(3 * x1 + 2 * x2, GRB.MAXIMIZE)\n\n# Добавяне на ограниченията\n\nm.addConstr(x1 + x2 &lt;= 48, \"Infrastructure\")\nm.addConstr(16 * x1 + 8 * x2 &lt;= 512, \"Staff\")\nm.addConstr(9 * x1 + 5 * x2 &lt;= 300, \"Budget\")\n\n# Неотрицателността на променливите е автоматично дефинирана в m.addVar\n\n# Решаване на модела\nm.optimize()\n\n# Отпечатване на резултата\nfor v in m.getVars():\n    print(f\"{v.varName}: {v.x}\")\n\n\nSet parameter WLSAccessID\nSet parameter WLSSecret\nSet parameter LicenseID to value 943475\nAcademic license 943475 - for non-commercial use only - registered to am___@feb.uni-sofia.bg\nGurobi Optimizer version 11.0.0 build v11.0.0rc2 (linux64 - \"Ubuntu 20.04.6 LTS\")\n\nCPU model: 12th Gen Intel(R) Core(TM) i5-1235U, instruction set [SSE2|AVX|AVX2]\nThread count: 12 physical cores, 12 logical processors, using up to 12 threads\n\nAcademic license 943475 - for non-commercial use only - registered to am___@feb.uni-sofia.bg\nOptimize a model with 3 rows, 2 columns and 6 nonzeros\nModel fingerprint: 0xbbfbd94b\nVariable types: 0 continuous, 2 integer (0 binary)\nCoefficient statistics:\n  Matrix range     [1e+00, 2e+01]\n  Objective range  [2e+00, 3e+00]\n  Bounds range     [0e+00, 0e+00]\n  RHS range        [5e+01, 5e+02]\nFound heuristic solution: objective 96.0000000\nPresolve time: 0.00s\nPresolved: 3 rows, 2 columns, 6 nonzeros\nVariable types: 0 continuous, 2 integer (0 binary)\n\nRoot relaxation: objective 1.110000e+02, 3 iterations, 0.00 seconds (0.00 work units)\n\n    Nodes    |    Current Node    |     Objective Bounds      |     Work\n Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n\n*    0     0               0     111.0000000  111.00000  0.00%     -    0s\n\nExplored 1 nodes (3 simplex iterations) in 0.01 seconds (0.00 work units)\nThread count was 12 (of 12 available processors)\n\nSolution count 2: 111 96 \n\nOptimal solution found (tolerance 1.00e-04)\nBest objective 1.110000000000e+02, best bound 1.110000000000e+02, gap 0.0000%\nAmerican: 15.0\nBritish: 33.0\n\n\n\n\nПокажи кода\ntmp = {v.varName: [v.x] for v in m.getVars()}\nres_df = pd.DataFrame(tmp)\nres_df.head()\n\n\n\n\n\n\n\n\n\n\nAmerican\nBritish\n\n\n\n\n0\n15.0\n33.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Въведение</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html",
    "href": "03-Graphical-Method/01-Blending.html",
    "title": "2  Графичен метод",
    "section": "",
    "text": "2.1 Задача: планиране на производство\nБутиково кафене в София предлага два продукта: Супер еспресо и Делукс еспресо. За приготвянето на един килограм от първия вид еспресо са необходими по равни части арабика и робуста, а рецептата за Делукс предвижда смес от арабика и робуста в пропорция 1 към 3. Доставчиците са готови да осигурят 120 кг арабика и 160 кг. робуста. Заведението знае, че няма да може да продаде повече от 150 кг. Делукс еспресо. От всеки продаден килограм Супер еспресо заведението печели 40 лв., докато печалбата от килограм Делукс възлиза на 50 лв.\nКолко от двата типа кафе ще препоръчате на кафенето да смеси?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#задача-планиране-на-производство",
    "href": "03-Graphical-Method/01-Blending.html#задача-планиране-на-производство",
    "title": "2  Графичен метод",
    "section": "",
    "text": "Математически модел\n\n\n\n\n\nЦелеви променливи:\n\n\\begin{align*}\n& x_1: \\text{ Супер еспресо (кг.)}\\\\\n& x_2: \\text{ Делукс еспресо (кг.)}\n\\end{align*}\n\n\n\\max z = 40 x_1 + 50 x_2 \\text{ (целева функция)}\n \\begin{align*}\n0.5 x_1 + 0.25 x_2 & \\leq 120 \\text{ (арабика)}\\\\\n0.5 x_1 + 0.75 x_2 & \\leq 160 \\text{ (робуста)} \\\\\n0 \\cdot x_1 + x_2 & \\leq 150 \\text{ (търсене Делукс)}\\\\\nx_1 & \\geq 0 \\\\\nx_2 & \\geq 0\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#допустимо-множество",
    "href": "03-Graphical-Method/01-Blending.html#допустимо-множество",
    "title": "2  Графичен метод",
    "section": "2.2 Допустимо множество",
    "text": "2.2 Допустимо множество\nКакто и в предишната задача ще изобразим графично допустимото множество, като начертаем правите, към всяко от петте неравенства:\n\n\\begin{align}\n0.5 x_1 & + 0.25 x_2 & = & 120 \\\\\n0.5 x_1 & + 0.75 x_2 & = & 160 \\\\\n0 \\cdot x_1 & + x_2 & = & 150\n\\end{align}\n\nПърво ще пресметнем пресечните точки на трите прави с осите x_1 и x_2?\n\nПрава арабика: (0, 120 / 0.25 = 480), (120 / 0.5 = 240, 0)\nПрава робуста: (0, 160 / 0.75), (160 / 0.5, 0)\nПрава търсене на Делукс: (0, 150), (100, 150) Тази права е успоредна на оста x_1.\n\n\n\nПокажи кода\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom IPython.display import display\n\nfig, ax = plt.subplots()\n\nax.plot([0, 240], [480, 0], label=r\"$0.5 x_1 + 0.25 x_2 = 120$ (арабика)\")\nax.plot([0, 320], [213.33, 0], label=r\"$0.5 x_1 + 0.75 x_2 = 160$ (робуста)\")\nax.plot([0, 400], [150, 150], label=r\"$x_2 = 150$ (търсене на Делукс)\")\n\nax.set_xlim((0, 400))\nax.set_ylim((0, 500))\nax.set_xlabel(r'$x_1$ (Супер, кг.)')\nax.set_ylabel(r'$x_2$ (Делукс, кг.)')\nax.legend(loc=0)\n\n\n\n\n\n\n\n\nFigure 2.1: Прави на трите ограничения\n\n\n\n\n\nДопустимото множество е определено от всички точки, които едновременно изпълняват всички ограничения. На Figure 2.1 това е полигонът определен от\n\nПресечната точка на равенствата на двете ограничения за неотрицателност: (0, 0)\nПресечната точка на неотрицателността на “Супер еспресо” (оста x_1) и “арабика”: (240, 0).\nПресечната точка на равенствата на ограниченията “арабика” и “робуста”\nПресечната точка на равенствата на ограниченията “робуста” и “търсене на Делукс”\nПресечната точка на равенствата на ограниченията “търсене на Делукс” и неотрицателността на Делукс (оста x_2). Вече пресметнахме тази точка, когато чертахме правите към ограниченията: (0, 150).\n\nВ пресечната точка на правите към “робуста”/“арабика” са изпълнени и двете равенства едновременно. За да намерим точката трябва да решим система от двете уравнения\n\n\\begin{align}\n0.5 x_1 + 0.25 x_2 & = 120 \\text{ (1: арабика)} \\\\\n0.5 x_1 + 0.75 x_2 & = 160 \\text{ (2: робуста)}\n\\end{align}\n\nЕдин начин да решим системата е да извадим първото уравнение от второто уравнение. Когато го направим получаваме\n\n\\begin{align}\n(0.75 - 0.25) x_2 & = 160 - 120 \\\\\n0.5 x_2 & = 40 \\\\\nx_2 & = 80\n\\end{align}\n\nЗаместваме с x_2 = 80 в първото уравнение и получаваме\n\n\\begin{align}\n0.5 x_1 + 0.25 \\cdot 80 & = 120\\\\\nx_1 & = 200.\n\\end{align}\n\nРешението на системата е (200, 80): пресечната точка на двете прави.\nЗа да намерим координатите на пресечната точка на равенствата на “робуста” и “търсене на Делукс” трябва да решим системата от две уравнения принадлежащи към тези ограничения:\n\n\\begin{align}\n0.5x_1 + 0.75 x_2 & = & 160 \\text{ робуста}\\\\\n0 x_1 + x_2 & = & 150 \\text{ търсене на Делукс}\n\\end{align}\n\nРешението на системата можем да получим, като заместим в първото уравнение с x_2 = 150, за да получим\nС това намерихме координатите на пресечната точка между правите на “робуста” и “търсене на Делукс”: (95, 150).\nТака получаваме върховете на допустимото множество: (0, 0), (240, 0), (200, 80), (95, 150), (0, 150) (Figure 2.2).\n\n\nПокажи кода\nvertices = [\n    [0, 0],\n    [0, 150],\n    [95, 150],\n    [200, 80],    \n    [240, 0]\n]\n\nvertices_x = [v[0] for v in vertices]\nvertices_y = [v[1] for v in vertices]\n\nfor v in vertices:\n    ax.annotate(\n        f\"({v[0]}, {v[1]})\",\n        (v[0], v[1]),\n        textcoords=\"offset points\",\n        xytext=(0, 5)\n    )\n\nax.fill(vertices_x, vertices_y, color='grey', alpha=0.3)\n\ndisplay(fig)\n\n\n\n\n\n\n\n\nFigure 2.2: Допустимо множество",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#целева-функция-и-оптимален-план",
    "href": "03-Graphical-Method/01-Blending.html#целева-функция-и-оптимален-план",
    "title": "2  Графичен метод",
    "section": "2.3 Целева функция и оптимален план",
    "text": "2.3 Целева функция и оптимален план\nЗа да определим оптималния план графично ще начертаем прави, съответстващи на различни нива на печалба.\nЦелевата функция зависи от две променливи, което означава, че за да я изобразим графично ще трябва да използваме трето измерение. Figure 2.3 показва графиката на целевата функция в тримерно пространство, както и нейната проекция в двумерно пространство.\n\n\nПокажи кода\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\n\n# Create the x, y, and z coordinate arrays\nx, y = np.meshgrid(np.linspace(0, 250, 20), np.linspace(0, 250, 20))\nz = 40 * x + 30 * y\n\n# Create a figure\nfig = plt.figure()\n\nax = fig.add_subplot(111, projection='3d')\n\n# Add a 3D subplot\nax.plot_surface(x, y, z, rstride=5, cstride=5, edgecolor='k', alpha=0.5)\nax.view_init(elev=25, azim=-120)\nax.set_xlabel(r\"$x_1$ (Супер, кг.)\")\nax.set_ylabel(r\"$x_2$ (Делукс, кг.)\")\nax.set_zlabel(r\"$z$ (Печалба, лв.)\")\n\nvertices_3d = [v + [0] for v in vertices]\n\n# Create a Poly3DCollection\npoly = Poly3DCollection([vertices_3d], alpha=.25, linewidths=1, edgecolors='r', facecolors='c')\n\n# Add the Poly3DCollection to the axes\nax.add_collection3d(poly)\n\n\n\n\n\n\n\n\nFigure 2.3: Целева функция\n\n\n\n\n\nГорното изображение е удобно, за да разберем как изглежда целевата функция, но не ни помага да намерим максимума й в рамките на допустимото множество. Затова ще използваме проекцията на целевата функция върху равнината на допустимото множество.\nНека фиксираме няколко (произволни нива на печалба) и да начертаем правите, които ги представляват. Нека тези нива са 5000, 10000 и 12000. За да изобразим тези прави ще трябва да намерим пресечните точки на тези прави с двете оси.\nВсички комбинации x_1 и x_2, за които печалбата (целевата функция) е равна на 5000 лв лежат на права, определена от равенството:\n\n40x_1 + 50x_2 = 5000\n\nВсички комбинации x_1 и x_2, за които печалбата (целевата функция) е равна на 1000 лв. лежат на права, определена от равенството\n\n40x_1 + 50x_2 = 10000\n\nДвете прави са успоредни една спрямо друга, тъй като наклонът на правите зависи от коефициентите на x_1 и x_2 в уравненията и не зависи от константите (5 000 в първото уравнение и 10 000 във второто).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#нормален-вектор",
    "href": "03-Graphical-Method/01-Blending.html#нормален-вектор",
    "title": "2  Графичен метод",
    "section": "2.4 Нормален вектор",
    "text": "2.4 Нормален вектор\nНека фиксираме ниво на печалба от 5000 лв. Всички комбинации от супер и делукс, които постигат точно това ниво на печалба лежат на права, дадена от следното уравнение:\n\n40x_1 + 50x_2 = 5000\n\nТази права се пресича с оста x_1 при x_1 = 125 и с оста x_2 при x_2 = 100. От тези две точки можем да изведем параметричното представяне на правата (за t \\in \\mathbb{R}).\n\n\\begin{pmatrix}\nx_1 \\\\\nx_2\n\\end{pmatrix}\n= \\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n+ t \\left[\n\\begin{pmatrix}\n125 \\\\\n0\n\\end{pmatrix}\n-\n\\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n\\right]\n\nПресмятаме разликата между двата вектора и получаваме\n\n\\begin{pmatrix}\nx_1 \\\\\nx_2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0 \\\\\n100\n\\end{pmatrix}\n+ t\n\\begin{pmatrix}\n125 \\\\\n-100\n\\end{pmatrix}\n\nВторият вектор показва посоката на правата, а векторът от коефициентите пред x_1 и x_2 в първоначалното уравнение е\n\n\\begin{pmatrix}\n40 \\\\\n50\n\\end{pmatrix}\n\nДва вектора са ортогонални (перпендикулярни), ако скаларното им произведение е равно на 0. Скаларното произведение на два вектора е равно на сумата от произведенията на съответните им координати. Така получаваме\n\n\\begin{pmatrix}\n40 \\\\\n50\n\\end{pmatrix}\n\\cdot\n\\begin{pmatrix}\n125 \\\\\n-100\n\\end{pmatrix}\n= 40 \\cdot 125 + 50 \\cdot (-100) = 0\n\n\n\nПокажи кода\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nA = np.array([0, 100])\nB = np.array([125, 0])\nC = B - A\n\n# Create a figure\nfig, ax = plt.subplots()\n\n# Plot the vectors\nax.quiver(0, 0, A[0], A[1], angles='xy', scale_units='xy', scale=1, color='r', label='A')\nax.quiver(0, 0, B[0], B[1], angles='xy', scale_units='xy', scale=1, color='b', label='B')\nax.quiver(A[0], A[1], C[0], C[1], angles='xy', scale_units='xy', scale=1, color='g', label='B-A')\n\n# Set the limits of the plot\nax.set_xlim([-2, 125])\nax.set_ylim([-2, 125])\n\n# Add a legend\nax.legend(loc=0)\n\n\n\n\n\n\n\n\n\nНека да начертаем тези прави на графиката на допустимото множество. Figure 2.4 показва графиката на допустимото множество и правите на печалбата от 3000 лв., 50000 лв. и 12000 лв.\n\n\nПокажи кода\nfig, ax = plt.subplots()\n\nax.fill(vertices_x, vertices_y, color='grey', alpha=0.3)\nfor v in vertices:\n    ax.annotate(\n        f\"({v[0]}, {v[1]})\",\n        (v[0], v[1]),\n        textcoords=\"offset points\",\n        xytext=(0, 5)\n    )\n\nax.plot([0, 3000 / 40], [3000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 3000$')\nax.plot([0, 5000 / 40], [5000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 5000$')\nax.plot([0, 12000 / 40], [12000 / 50, 0], label=r'$40 x_1 + 50 x_2 = 12000$')\n\nax.quiver(0, 0, 40, 50, angles='xy', scale_units='xy', scale=1, color='grey', label='Нормален вектор')\n\nax.set_xlim((0, 260))\nax.set_ylim((0, 260))\n\nax.legend(loc=0)\n\n\n\n\n\n\n\n\nFigure 2.4: Оптимален план\n\n\n\n\n\nВекторът (40, 50) се нарича нормален вектор на правите на функцията на печалба и е перпендикулярен на тях. Координатите на нормалния вектор се получават от коефициентите на x_1 и x_2 в целевата функция.\nПравата на максималната печалба (12 000 лв.) се допира до допустимото множество в точката (x^*_1 = 200, x^*_2 = 80), която е и оптималният план.\nС други думи препоръката ни към кафенето е да произведе 200 кг. супер еспресо и 80 кг. делукс еспресо, за да постигне максимална печалба от 12 000 лв.\nЗа целта ще са му нужни\n\n0.5 \\cdot 200 + 0.25 \\cdot 80 = 120 \\text{ кг. арабика}\n\nи\n\n0.5 \\cdot 200 + 0.75 \\cdot 80 = 160 \\text{ кг. робуста}.\n\nГраницата на търсенето на делукс еспресо е 150 кг., което е по-малко от 80 кг. Това означава, че кафенето ще може да продаде всичко, което произведе.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#задача-1",
    "href": "03-Graphical-Method/01-Blending.html#задача-1",
    "title": "2  Графичен метод",
    "section": "2.5 Задача 1",
    "text": "2.5 Задача 1\nПредприятие произвежда два вида боя: екстериорна (за външни повърхности) и интериорна (за вътрешни помещения). Производството двете бои изисква три суровини: разтворител, багрило и смола. За производство на един тон екстериорна боя са нужни 6 тона разтворител, един тон багрило и 2 тона смола. За производство на един тон интериорна боя са нужни 4 тона разтворител, 2 тона багрило и 7 тона смола. На разположение са следните количества суровини: 24 тона разтворител, 6 тона багрило и 4 тона смола. Колко тона от всяка боя да произведе предприятието, за да постигне максимална печалба? От продажбата на един тон екстериорна боя предприятието печели 5 000 лв., а от продажбата на един тон интериорна боя - 4 000 лв.\n\n\n\nTable 2.1: Консумация на материали за производството на интериорна и екстериорна боя и печалба за продаден тон\n\n\n\n\n\n\n\n\n\n\n\n\nЕкстериорна боя\nИнтериорна боя\nДневна наличност на ресурс\n\n\n\n\nРазтворител\n6\n4\n24\n\n\nБагрило\n1\n2\n6\n\n\nСмола\n2\n7\n4\n\n\nПечалба (1 000 лв./тон)\n5\n4\n\n\n\n\n\n\n\nСъставете математически модел, който да намери оптималния план за производство на боите.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nЦелеви променливи: \n\\begin{align*}\n& x_1: \\text{ Екстериорна боя (тонове)}\\\\\n& x_2: \\text{ Интериорна боя (тонове)}\n\\end{align*}\n\n\n\\max z = 5000 x_1 + 4000 x_2 \\text{ (целева функция)}\n\nОграничения:\n\n\\begin{align*}\n6x_1 + 4x_2 & \\leq 24 \\text{ (разтворител)}\\\\\nx_1 + 2x_2 & \\leq 6 \\text{ (багрило)}\\\\\n2x_1 + 7x_2 & \\leq 4 \\text{ (смола)}\\\\\nx_1 & \\geq 0 \\\\\nx_2 & \\geq 0\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "03-Graphical-Method/01-Blending.html#задача-2",
    "href": "03-Graphical-Method/01-Blending.html#задача-2",
    "title": "2  Графичен метод",
    "section": "2.6 Задача 2",
    "text": "2.6 Задача 2\nКомпания произвежда три вида зърнени закуски: A, B и C. Закуските се произвеждат от четири съставки: овесени ядки, стафиди, настъргани кокосови орехи и нарязани бадеми.\n\nПродукт А е смес от овесени ядки, стафиди и бадеми в съотношение 50:5:2.\nПродукт B е смес от овесени ядки, кокосови орехи и бадеми в съотношение 60:2:3.\nВ продукт C са смесени овесени ядки, стафиди, кокосови орехи и бадеми в пропорция 60:3:4:2.\nКомпанията продава продуктите за съответно 2.00 лв., 2.50 лв. и 3.00 лв. за кутия от 2 кг.\nКомпанията трябва да задоволи минимално дневно търсене на A, B и C от 500, 600 и 400 кутии.\nКомпанията купува съставките за 100 лв./тон (овесени ядки), 120 лв./тон (стафиди), 110 лв./тон (кокосови орехи) и 200 лв./тон (бадеми).\nДоставките са ограничени до 5 тона на ден (овесени ядки), 2 тона (стафиди) и по един тон на ден за останалите две съставки (кокосови орехи, бадеми).\n\nСъставете математически модел с който да препоръчате оптимален производствен план за тази компания. Целта на модела е да намери производствен план с най-висока стойност на печалбата на компанията.\n\n\n\n\n\n\nМатематически модел\n\n\n\n\n\nЦелеви променливи:\n\n\\begin{align*}\n& x_{Aя}: \\text{овесени ядки в продукт A} \\\\\n& x_{Aс}: \\text{стафиди в продукт A} \\\\\n& x_{Aк}: \\text{кокосови орехи в продукт A} \\\\\n& x_{Aб}: \\text{бадеми в продукт A} \\\\\n& x_{Bя}: \\text{овесени ядки в продукт B} \\\\\n& x_{Bк}: \\text{кокосови орехи в продукт B} \\\\\n& x_{Bб}: \\text{бадеми в продукт B} \\\\\n& x_{Cя}: \\text{овесени ядки в продукт C} \\\\\n& x_{Cс}: \\text{стафиди в продукт C} \\\\\n& x_{Cк}: \\text{кокосови орехи в продукт C} \\\\\n& x_{Cб}: \\text{бадеми в продукт C} \\\\\n\\end{align*}\n\n\n\\begin{align*}\nX_A & = \\frac{50}{57} x_{Aя} + \\frac{5}{57} x_{Aс} + 0\\cdot x_{Ak}  + \\frac{2}{57} x_{Aб} \\\\\nX_B & = \\frac{60}{65} x_{Bя} + 0 \\cdot x_{Bс} + \\frac{2}{65} x_{Bк} + \\frac{3}{65} x_{Bб} \\\\\nX_C & = \\frac{60}{69} x_{Cя} + \\frac{3}{69} x_{Cс} + \\frac{4}{69} x_{Cк} + \\frac{2}{69} x_{Cб} \\\\\n\\end{align*}\n\nПриходи\n\n\\text{Приходи} = 2.0 \\cdot 500 x_{A} + 2.5 \\cdot 500 x_{B} + 3.0 \\cdot 500 x_{C}\n\nРазходи:\n\n\\text{Разходи} = 100(\\underbrace{x_{Aя} + x_{Bя} + x_{Cя}_{\\text{използвани ядки}}}) + 120(\\underbrace{x_{Aс} + x_{Cс}}_{\\text{използвани стафиди}}) + 110(\\underbrace{x_{Bк} + x_{Cк}}_{\\text{използван кокос}}) + 200(\\undebrace{x_{Aб} + x_{Bб} + x_{Cб}}_{използвани бадеми})\n\nЦелева функция:\n\n\\text{Печалба} = \\text{Приходи} - \\text{Разходи}\n\nОграничения за минимални доставки\n\n\\begin{align*}\nX_{A} & \\geq 500 / (1000 / 2) \\text{ (минимално производство на A в тонове)}\\\\\nX_{B} & \\geq 600 / (1000 / 2) /  \\text{ (минимално производство на B в тонове)}\\\\\nX_{C} & \\geq 400 / (100 / 2) \\text{ (минимално производство на C в тонове)}\n\\end{align*}\n\nОграничения за наличност на суровини\n\n\\begin{align*}\nx_{Aя} + x_{Bя} + x_{Cя} & \\leq 5 \\text{ (овесени ядки в тонове)}\\\\\nx_{Aс} + x_{Cс} & \\leq 2 \\text{ (стафиди в тонове)}\\\\\nx_{Bк} + x_{Cк} & \\leq 1 \\text{ (кокосови орехи в тонове)}\\\\\nx_{Aб} + x_{Bб} + x_{Cб} & \\leq 1 \\text{ (бадеми в тонове)}\n\\end{align*}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Графичен метод</span>"
    ]
  },
  {
    "objectID": "Literature.html",
    "href": "Literature.html",
    "title": "Литература",
    "section": "",
    "text": "Taha (2017)\nWilliams (2013)\n\n\n\n\n\nTaha, Hamdy A. 2017. Operations Research. 10th ed. Harlow, United Kingdom: Pearson Education Limited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical Programming. Fifth Edition. Chichester: John Wiley & Sons Ltd.",
    "crumbs": [
      "Литература"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Библиография",
    "section": "",
    "text": "Taha, Hamdy A. 2017. Operations Research. 10th ed.\nHarlow, United Kingdom: Pearson Education\nLimited.\n\n\nWilliams, Hilary P. 2013. Model Building in Mathematical\nProgramming. Fifth Edition. Chichester: John\nWiley & Sons Ltd.",
    "crumbs": [
      "Библиография"
    ]
  }
]